AWSTemplateFormatVersion: '2010-09-09'

Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16

  # ALB requires at least two subnets
  PubSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.10.1.0/24
      AvailabilityZone: us-east-1d

  PubSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.10.2.0/24
      AvailabilityZone: us-east-1e

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteViaIgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRouteViaIgw:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw

  PubSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65000
        CidrIp: 0.0.0.0/0

  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      UnhealthyThresholdCount: 3
      Name: mschurnenko-ecs-service
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref EcsSecurityGroup
      Subnets:
        - !Ref PubSubnetAz1
        - !Ref PubSubnetAz2

  EcsInstanceLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-d69c74c0
      InstanceType: t2.micro
      IamInstanceProfile: arn:aws:iam::505545132866:instance-profile/ecsInstanceRole
      AssociatePublicIpAddress: true
      KeyName: mschurenko
      SecurityGroups: [ !Ref EcsSecurityGroup ]
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo ECS_CLUSTER=mschurenko-test > /etc/ecs/ecs.config

  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PubSubnetAz1
        - !Ref PubSubnetAz2
      LaunchConfigurationName: !Ref EcsInstanceLc
      MinSize: '0'
      MaxSize: '1'
      DesiredCapacity: '1'
      Tags:
        -
          Key: Name
          Value: !Sub "mschurenko - ${AWS::StackName}"
          PropagateAtLaunch: 'true'

Outputs:
  #ALB
  EcsInstanceAsgName:
    Description: Auto Scaling Group Name for ECS Instances
    Value: !Ref EcsInstanceAsg
